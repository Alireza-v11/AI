import streamlit as st
import pandas as pd
from parsivar import Normalizer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

st.title("🔍 تحلیل احساسات متن فارسی")
st.markdown("ابتدا فایل داده خود را بارگذاری کن:")

uploaded_file = st.file_uploader("📂 آپلود فایل CSV", type=["csv"])

if uploaded_file is not None:
    @st.cache_resource
    def load_model(data):
        df = pd.read_csv(data)[['Text', 'Suggestion']].dropna()
        df.columns = ['text', 'label']

        normalizer = Normalizer(statistical_space_correction=True)

        def clean_text(text):
            text = normalizer.normalize(str(text))
            return text.replace("،", "").replace(".", "").replace("؟", "")

        df['clean_text'] = df['text'].apply(clean_text)

        X_train, _, y_train, _ = train_test_split(df['clean_text'], df['label'], test_size=0.2, random_state=42)

        vectorizer = TfidfVectorizer(max_features=3000)
        X_train_vec = vectorizer.fit_transform(X_train)

        model = LogisticRegression(max_iter=1000)
        model.fit(X_train_vec, y_train)

        return model, vectorizer, normalizer

    # بارگذاری مدل
    model, vectorizer, normalizer = load_model(uploaded_file)

    st.markdown("متن خودت رو وارد کن تا احساسش مشخص بشه:")
    user_input = st.text_area("📝 جمله:")

    if st.button("تحلیل کن"):
        if user_input.strip() == "":
            st.warning("لطفاً یک جمله وارد کن.")
        else:
            def predict_sentiment(text):
                cleaned = normalizer.normalize(str(text)).replace("،", "").replace(".", "").replace("؟", "")
                vec = vectorizer.transform([cleaned])
                pred = model.predict(vec)[0]
                return "مثبت 😊" if pred == 1 else "منفی 😠"

            result = predict_sentiment(user_input)
            st.success(f"نتیجه تحلیل: **{result}**")
else:
    st.info("لطفاً یک فایل CSV بارگذاری کن.")
